RUNNING THE SERVER ---------------------------------------------------------------------------------

install node.js and npm
install nodemon: sudo npm install -g nodemon
run db with nodemon start.js

install express: npm install express

RUNNING TESTS ---------------------------------------------------------------------------------
npm install jest --save-dev
npm install supertest --save-dev
npm run test or npm run test:watch

DESCRIPTION OF THE ENDPOINTS IN INVETORY.JS --------------------------------------------------------
1. GET request to path /api/inventory/:username
- if user exists, returns an array of InventoryItemSchema objects, in alphabetical order
- if inventory is empty, returns empty array
- for the above 2 cases, the status code is 200
- otw if the user doesn't exist, return {"error": "No inventory list detected."} and status code 404
- the returned object will be json

2. POST request to path /api/inventory/:username
- adds item to the user's inventory if it has not already been added
- the object passed needs to be of the form {"item": InventoryItemSchema}
- if successful, status 200 and {"success": "Item was successfully added."}
- if unsuccessful due to attempting to add a duplicate item, status 409 and {error: "Item already exists in user's inventory."} are returned
- otw if a different error occurs (i.e the user specified isnt in the database), return status 404 and {"error": "Item could not be added."}
- returned object will be json
- since im sorting the items alphabetically by the name field, can you ensure that the name has a capital first letter?
- i'm not sure how we will handle pluralized items vs singular since mongodb won't consider them a duplicate
- also the dates need to be converted to ISO 8601 strings so that later i can reconvert them into date objects when im checking for expired items but i believe that when you turn the object into json, that this should happen by default so you may not need to actually do anything

3. GET request to path /api/inventory/:username/expiring
- if there are no expiring items, the return should be status 200 and {"expiring": []}
- if there are items, then it should be status 200 and {"expiring": [InventoryItemSchema]}
- the list will be sorted alphabetically
- if the user doesnt exist or some other error occurs, the return wil be status 404 and {"error": "No inventory list detected."}
- the returned object will be json

4. GET request to path /api/inventory/:username/expired
- if there are no expired items, the return should be status 200 and {"expired": []}
- if there are items, then it should be status 200 and {"expired": [InventoryItemSchema]}
- the list will be sorted alphabetically
- if the user doesnt exist or some other error occurs, the return wil be status 404 and {"error": "No inventory list detected."}
- the returned object will be json

5. GET request to path /api/inventory/:username/:itemName
- check if a specified item is in the specified user's inventory
- if yes: return status 200 and {"message": "Item already exists in user's inventory."}
- if no: return status 404 and {"message": "Item doesn't exist in user's inventory."}
- the returned object will be json

6. DELETE request to path /api/inventory/:username/:itemName
- delete an item from the inventory, a precondition should be that only existing items are deleted
- on successful deletion status 200 and {"success": "item " + itemName + " deleted."} is returned
- otw status 404 and {"error": "No such item found in inventory."} is returned
- the returned object will be json

7. PUT request to path /api/inventory/:username/:itemName
- update an item's information, precondition: this endpoint is never used when they want to set an item's quantity to zero, instead delete endpoint should be called
- also the entire InventoryItemSchema should be passed to the endpoint
- on success, return status 200 and {"success": "item " + itemName + " updated."}
- otw return status 404 and {"error": "No such item found in inventory."}, if the precondition is satisfied then this should not occur
- the returned object will be json
- NOTE: currently the item name is not being updated, if this needs to change please let us know

DESCRPTION OF ENDPOINTS IN SHOPPINGLIST.JS ---------------------------------------------
1. GET REQUEST TO PATH /api/shoppinglist/:username
- To get the user's current shoppinglist
- On success, returns status 200 and the user's shoppinglist.
- If empty, returns an empty list.

2. POST REQUEST TO PATH /api/shoppinglist/:username
- To add an item to the user's shoppinglist 
- On success, returns status 200 and adds the item to the user's shoppinglist
- On failure returns status 404

Integration changes:
- modified start.js to display the port number even when the
  app isn't listening to port 5000
- added fields to user schema is schemas.js
- started adding routes to users.js that will take care of signin/signup/signout
- still haven't figured out the session and cookie stuff

- npm install express-session
- npm install connect-mongo
- no longer need cookie-parser

TO DO:
- recipes
- test the express-session stuff
- figure out the cookie initialization and use
- create config.json file for database pass and username
- create .env file for session secret???
- figure out what the final database will be for the sessions
  and how to use the sessions and cookies